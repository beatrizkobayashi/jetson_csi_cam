#include <ros/ros.h>
#include <sensor_msgs/Image.h>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>
#include <opencv2/calib3d.hpp>
#include <opencv2/imgproc.hpp>

cv::Mat K = (cv::Mat_<double>(3, 3) << 600, 0, 960, 0, 600, 540, 0, 0, 1); 
cv::Mat D = (cv::Mat_<double>(4, 1) << -0.2, 0.1, 0, 0);


void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
    // Converting ROS image to OpenCV
    cv_bridge::CvImagePtr cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    
    // Getting height and width from the image
    int width = cv_ptr->image.cols;
    int height = cv_ptr->image.rows;
    
    // Calculating the new callibration matrix
    cv::Mat new_K = cv::getOptimalNewCameraMatrix(K, D, cv::Size(width, height), 0, cv::Size(width, height), 0);
    
    // Inicializing maps for distortion removal
    cv::Mat map1, map2;
    cv::fisheye::initUndistortRectifyMap(K, D, cv::Matx33d::eye(), new_K, cv::Size(width, height), CV_16SC2, map1, map2);
    
    // Removing the distortion
    cv::Mat undistorted_image;
    cv::remap(cv_ptr->image, undistorted_image, map1, map2, cv::INTER_LINEAR);
    
    // Converting back the image to ROS and publishing
    sensor_msgs::ImagePtr output_msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", undistorted_image).toImageMsg();
    pub.publish(output_msg);

}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "csi_undistort_node");
    ros::NodeHandle nh;

    // Subscribing to raw image topic
    ros::Subscriber sub = nh.subscribe("/csi_cam_0/image_raw", 10, imageCallback);

    // Publishing undistorted image;
    ros:: Publisher pub = nh.advertise<sensor_msgs::Image>("/csi_cam_0/image_undistorted", 10);

    ros::spin();
    return 0;
}